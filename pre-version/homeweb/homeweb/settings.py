"""
Django settings for homeweb project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os, json
from django.core.exceptions import ImproperlyConfigured  # 아직 적용 안함

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_DIR = os.path.dirname(BASE_DIR)

# .config_secret 폴더 및 하위 파일 경로
CONFIG_SECRET_DIR = os.path.join(ROOT_DIR, '.config_secret')
secret_file = os.path.join(CONFIG_SECRET_DIR, 'secrets.json') # secrets.json 파일 위치를 명시

# Whoosh 사용을 위함 # 아직 적용 안함
WHOOSH_INDEX = os.path.join(BASE_DIR, 'whoosh_index')

HAYSTACK_CONNECTIONS = {
    'default': {
#        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'ENDINE': 'haystack.backends.elasticsearch5_backend.Elasticsearch5SearchEngine',
#        'PATH': WHOOSH_INDEX,
        'URL': 'http://127.0.0.1:9200/',
        'INDEX_NAME': 'haystack',
    },
}

# 비밀 키를 가져오기 위한 함수
with open(secret_file) as f:
    secrets = json.loads(f.read())

def get_secret(setting, secrets=secrets):
    """비밀 변수를 가져오거나 명시적 예외를 반환한다."""
    try:
        return secrets[setting]
    except KeyError:
        error_msg = "Set the {} environment variable".format(setting)
        raise ImproperlyConfigured(error_msg)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',    # 추가

    # 아직 적용 안함
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
#    'allauth.socialaccount.providers.github',
#    'allauth.socialaccount.providers.daum',
#    'allauth.socialaccount.providers.facebook',  #고칠 것
#    'allauth.socialaccount.providers.google',
#    'allauth.socialaccount.providers.gitlab',
#    'allauth.socialaccount.providers.instagram',
#    'allauth.socialaccount.providers.kakao',
#    'allauth.socialaccount.providers.line',
#    'allauth.socialaccount.providers.naver',
#    'allauth.socialaccount.providers.twitter',

    # 검색 엔진 # 아직 적용 안함
    'haystack',
    'elasticsearch',

    'posts.apps.PostsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'homeweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'static/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',    # 'allauth' 는 이 장고 폼을 필요로 한다.
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'homeweb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True




# 추가  # 아직 적용 안함
AUTHENTICATION_BACKENDS = (
    # allauth에 관계없이 장고 관리자의 사용자 이름으로 로그인해야 한다.
    "django.contrib.auth.backends.ModelBackend",
    # 'allauth' 특정 인증 방법(ex. 전자 메일로 로그인)
    "allauth.account.auth_backends.AuthenticationBackend",
)

SITE_ID = 1


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

MEDIA_DIR = os.path.join(BASE_DIR, "static/media")
MEDIA_ROOT = os.path.dirname(MEDIA_DIR)
MEDIA_URL = '/static/media/'


# Redirect 설정
LOGIN_REDIRECT_URL = '/'    # 로그인 후 / 화면으로 돌아감
LOGOUT_REDIRECT_URL = '/'    # 로그아웃 후 / 화면으로 돌아감

# LOGIN/LOGOUT
LOGIN_URL = 'accounts/login'

# PASSWORD 재설정 이메일 # 아직 적용 안함
EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
EMAIL_FILE_PATH = os.path.join(ROOT_DIR, 'sent_emails')
